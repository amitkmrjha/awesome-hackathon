jdbc-connection-settings {

  host = "localhost"
  host = ${?POSTGRESQL_HOST}

  port = 5432
  port = ${?POSTGRESQL_PORT}

  user = "awesome_hackathon"
  user = ${?POSTGRESQL_USER}

  password = "awesome_hackathon"
  password = ${?POSTGRESQL_PASSWORD}

  schema = "awesome_hackathon"
  schema = ${?POSTGRESQL_SCHEMA}

  database = "awesome_hackathon"
  database = ${?POSTGRESQL_DB}

  driver = "org.postgresql.Driver"
  driver = ${?POSTGRESQL_DRIVER}

    # Iam driver
    driver = "io.magj.iamjdbcdriver.PostgreSqlIamAuthJdbcDriverWrapper"
    driver = ${?POSTGRESQL_DRIVER}

    extraParameters="?verifyServerCertificate=true&useSSL=true&currentSchema="${jdbc-connection-settings.schema}
    extraParameters=${?POSTGRESQL_EXTRA_PARAMETERS}

    url = "jdbc:iampostgresql://"${jdbc-connection-settings.host}":"${jdbc-connection-settings.port}"/"${jdbc-connection-settings.database}${jdbc-connection-settings.extraParameters}
    url = ${?POSTGRESQL_URL}

    # the following properties are used to configure the
    # Hikari connection pool used on the read-side (pekko-projections)
    connection-pool {
      # How many connections should be available to from the pool?
      # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
      max-pool-size = ${pekko.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

      # How long should we wait (in millis) before it times out?
      # In a normal scenario, we should always be able to get a connection
      # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
      # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
      # Hence the low timout (note, 250 is lowest value hikari accepts)
      timeout = 250ms
    }

}

scalikejdbc.global {
  loggingSQLErrors = true
  loggingConnections = false
}
